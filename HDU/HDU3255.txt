/*
********************************************
*      Author:492859377                    *
*      ProblemID:HDU3255                   *
*      VjudgeProblemID:19080               *
*      SubmitTime:2015/8/12 13:53:32       *
*      SubmitType:C++                      *
*      Memory:15572KB                      *
*      CodeLen:3401B                       *
*      RunTime:1638ms                      *
********************************************
*/
#include<map>
#include<set>
#include<cmath>
#include<stack>
#include<queue>
#include<cstdio>
#include<string>
#include<vector>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<functional>

using namespace std;
typedef long long LL;
typedef pair<int, int> PII;
#define lson l,m,rt<<1
#define rson m+1,r,rt<<1|1
#define root 1,rear,1

int const MX = 1e5 + 5;

int m, ID[10];
int rear, cnt[MX << 2][4];
int A[MX << 1], S[MX << 2][4];

struct Que {
    int d, s;
    int top, L, R;
    Que() {}
    Que(int _top, int _L, int _R, int _d, int _s) {
        top = _top; L = _L; R = _R; d = _d; s = _s;
    }
    bool operator<(const Que &b)const {
        if(top == b.top) return d < b.d;
        return top < b.top;
    }
} Q[MX << 1];

struct Price {
    int id, money;
    bool operator<(const Price &b)const {
        return money < b.money;
    }
} price[10];

int BS(int x) {
    int L = 1, R = rear, m;
    while(L <= R) {
        m = (L + R) >> 1;
        if(A[m] == x) return m;
        if(A[m] > x) R = m - 1;
        else L = m + 1;
    }
    return -1;
}

void push_up(int l, int r, int rt) {
    if(cnt[rt][3]) {
        S[rt][1] = S[rt][2] = 0;
        S[rt][3] = A[r + 1] - A[l];
    } else if(cnt[rt][2]) {
        S[rt][3] = S[rt << 1][3] + S[rt << 1 | 1][3];
        S[rt][2] = A[r + 1] - A[l] - S[rt][3];
        S[rt][1] = 0;
    } else if(cnt[rt][1]) {
        S[rt][3] = S[rt << 1][3] + S[rt << 1 | 1][3];
        S[rt][2] = S[rt << 1][2] + S[rt << 1 | 1][2];
        S[rt][1] = A[r + 1] - A[l] - S[rt][3] - S[rt][2];
    } else if(l == r) S[rt][1] = S[rt][2] = S[rt][3] = 0;
    else {
        S[rt][1] = S[rt << 1][1] + S[rt << 1 | 1][1];
        S[rt][2] = S[rt << 1][2] + S[rt << 1 | 1][2];
        S[rt][3] = S[rt << 1][3] + S[rt << 1 | 1][3];
    }
}

void update(int L, int R, int d, int s, int l, int r, int rt) {
    if(L <= l && r <= R) {
        cnt[rt][s] += d;
        push_up(l, r, rt);
        return;
    }

    int m = (l + r) >> 1;
    if(L <= m) update(L, R, d, s, lson);
    if(R > m) update(L, R, d, s, rson);
    push_up(l, r, rt);
}

int main() {
    //freopen("input.txt", "r", stdin);
    int T, n, ansk = 0;
    scanf("%d", &T);
    while(T--) {
        rear = 0;
        memset(cnt, 0, sizeof(cnt));
        memset(S, 0, sizeof(S));

        scanf("%d%d", &n, &m);
        for(int i = 1; i <= m; i++) {
            scanf("%d", &price[i].money);
            price[i].id = i;
        }
        sort(price + 1, price + m + 1);
        for(int i = 1; i <= m; i++) {
            ID[price[i].id] = i;
        }

        for(int i = 1; i <= n; i++) {
            int x1, y1, x2, y2, s;
            scanf("%d%d%d%d%d", &x1, &y1, &x2, &y2, &s);
            Q[i] = Que(y1, x1, x2, 1, s);
            Q[i + n] = Que(y2, x1, x2, -1, s);

            A[++rear] = x1; A[++rear] = x2;
        }
        sort(Q + 1, Q + 1 + 2 * n);
        sort(A + 1, A + 1 + rear);
        rear = unique(A + 1, A + 1 + rear) - A - 1;

        LL ans = 0; int last = 0;
        for(int i = 1; i <= 2 * n; i++) {
            int sum = 0;
            for(int j = 1; j <= m; j++) {
                sum += price[j].money * S[1][j];
            }
            ans += (LL)(Q[i].top - last) * sum;
            update(BS(Q[i].L), BS(Q[i].R) - 1, Q[i].d, ID[Q[i].s], root);
            last = Q[i].top;
        }
        printf("Case %d: %I64d\n", ++ansk, ans);
    }
    return 0;
}
