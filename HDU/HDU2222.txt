/*
********************************************
*      Author:492859377                    *
*      ProblemID:HDU2222                   *
*      VjudgeProblemID:16403               *
*      SubmitTime:2015/10/21 14:37:42      *
*      SubmitType:G++                      *
*      Memory:27960KB                      *
*      CodeLen:2460B                       *
*      RunTime:546ms                       *
********************************************
*/
#include<map>
#include<set>
#include<cmath>
#include<ctime>
#include<stack>
#include<queue>
#include<cstdio>
#include<cctype>
#include<string>
#include<vector>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<functional>
#define fuck printf("fuck")
#define FIN freopen("input.txt","r",stdin)
#define FOUT freopen("output.txt","w+",stdout)
using namespace std;
typedef long long LL;

/*MX为总长度*/
const int MX = 500000 + 5;

struct AC_machine {
    int rear, root;
    int Next[MX][26], Fail[MX], End[MX];

    void Init() {
        rear = 0;
        root = New();
    }

    int New() {
        rear++;
        End[rear] = 0;
        for(int i = 0; i < 26; i++) {
            Next[rear][i] = -1;
        }
        return rear;
    }

    void Add(char*A) {
        int n = strlen(A), now = root;
        for(int i = 0; i < n; i++) {
            int id = A[i] - 'a';
            if(Next[now][id] == -1) {
                Next[now][id] = New();
            }
            now = Next[now][id];
        }
        End[now]++;
    }

    void Build() {
        queue<int>Q;
        Fail[root] = root;
        for(int i = 0; i < 26; i++) {
            if(Next[root][i] == -1) {
                Next[root][i] = root;
            } else {
                Fail[Next[root][i]] = root;
                Q.push(Next[root][i]);
            }
        }

        while(!Q.empty()) {
            int u = Q.front();
            Q.pop();

            for(int i = 0; i < 26; i++) {
                if(Next[u][i] == -1) {
                    Next[u][i] = Next[Fail[u]][i];
                } else {
                    Fail[Next[u][i]] = Next[Fail[u]][i];
                    Q.push(Next[u][i]);
                }
            }
        }
    }

    int Query(char *S) {
        int n = strlen(S), now = rear, ret = 0;
        for(int i = 0; i < n; i++) {
            now = Next[now][S[i] - 'a'];
            int temp = now;

            while(temp != root) {
                ret += End[temp];
                End[temp] = 0;
                temp = Fail[temp];
            }
        }
        return ret;
    }
} AC;

char A[100], B[MX * 2];

int main() {
    int T, n; //FIN;
    scanf("%d", &T);
    while(T--) {
        scanf("%d", &n);

        AC.Init();
        for(int i = 1; i <= n; i++) {
            scanf("%s", A);
            AC.Add(A);
        }
        AC.Build();

        scanf("%s", B);
        printf("%d\n", AC.Query(B));
    }
    return 0;
}
