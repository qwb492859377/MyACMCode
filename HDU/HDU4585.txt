/*
********************************************
*      Author:492859377                    *
*      ProblemID:HDU4585                   *
*      VjudgeProblemID:46093               *
*      SubmitTime:2015/6/4 16:59:05        *
*      SubmitType:C++                      *
*      Memory:24288KB                      *
*      CodeLen:1505B                       *
*      RunTime:265ms                       *
********************************************
*/

#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <queue>
#include <cmath>
#include <algorithm>
using namespace std;
#define fst first
#define snd second
pair<int, int> node[123456];
int a[123456], b[6666666];
int fa1[123456], fa2[123456];
int getfa1(int u) { return u == fa1[u]? u : fa1[u] = getfa1(fa1[u]); }
int getfa2(int u) { return u == fa2[u]? u : fa2[u] = getfa2(fa2[u]); }
int main() {
#ifndef ONLINE_JUDGE
    freopen("in.txt", "r", stdin);
#endif // ONLINE_JUDGE
    int n;
    while (cin >> n, n) {
        vector<pair<int, int> > out(n + 1);
        for (int i = 0; i <= n + 1; i ++) fa1[i] = fa2[i] = i;
        for (int i = 1; i <= n; i ++) {
            scanf("%d%d", &node[i].fst, &node[i].snd);
            a[i] = node[i].snd;
            b[a[i]] = node[i].fst;
        }
        sort(a + 1, a + 1 + n);
        for (int i = n; i > 1; i --) {
            int pos = lower_bound(a + 1, a + 1 + n, node[i].snd) - a;
            int L = getfa1(pos - 1), R = getfa2(pos + 1);
            int dif1 = 1e9, dif2 = 1e9;
            if (L > 0) dif1 = a[pos] - a[L];
            if (R <= n) dif2 = a[R] - a[pos];
            if (dif1 <= dif2) out[i] = make_pair(node[i].fst, b[a[L]]);
            else  out[i] = make_pair(node[i].fst, b[a[R]]);
            fa1[pos] = pos - 1;
            fa2[pos] = pos + 1;
        }
        out[1] = make_pair(node[1].fst, 1);
        for (int i = 1; i <= n; i ++) printf("%d %d\n", out[i].fst, out[i].snd);
    }
	return 0;
}le(~scanf("%d",&n),n){
        build(root);

        A[0]=1,W[0]=B[0]=INF/2;
        for(int i=1;i<=n;i++){
            scanf("%d%d",&A[i],&B[i]);
            W[i]=B[i];
        }

        sort(W,W+1+n);

        //for(int i=0;i<=n;i++) printf("%d,",W[i]);

        for(int i=0;i<=n;i++){
            int k=BS(B[i]);
            AA[k]=A[i];

            //printf("[%d,%d,%d]\n",B[i],k,A[i]);
        }

        update(n,INF/2,root);

        for(int i=1;i<=n;i++){
            int k=BS(B[i]);
            int l=0,r=n;

            l=query_max(0,k,root);
            r=query_min(k,n,root);

            //printf("[%d,%d,%d,%d]\n",B[i],k,l,r);

            if(l<0){
                printf("%d %d\n",A[i],AA[BS(r)]);
            }else if(r==INF){
                printf("%d %d\n",A[i],AA[BS(l)]);
            }else{
                if(abs(B[i]-l)<=abs(B[i]-r)){
                    printf("%d %d\n",A[i],AA[BS(l)]);
                }else{
                    printf("%d %d\n",A[i],AA[BS(r)]);
                }
            }


            update(k,B[i],root);
        }
    }
    return 0;
}
