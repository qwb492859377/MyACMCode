/*
********************************************
*      Author:492859377                    *
*      ProblemID:HDU5583                   *
*      VjudgeProblemID:287151              *
*      SubmitTime:2015/12/1 14:47:56       *
*      SubmitType:G++                      *
*      Memory:3228KB                       *
*      CodeLen:1984B                       *
*      RunTime:46ms                        *
********************************************
*/
#include<map>
#include<set>
#include<cmath>
#include<ctime>
#include<stack>
#include<queue>
#include<cstdio>
#include<cctype>
#include<string>
#include<vector>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<functional>
#define fuck(x) cout<<"["<<x<<"]"
#define FIN freopen("input.txt","r",stdin)
#define FOUT freopen("output.txt","w+",stdout)
using namespace std;
typedef long long LL;

const int MX = 1e5 + 5;

LL S[MX], F[MX];
char wh[MX];

LL solve() {
    int l, r, len, tot = 0;
    len = strlen(wh + 1);
    S[0] = F[0] = 0;
    for(l = 1; l <= len; l = r + 1) {
        for(r = l; r < len && wh[r + 1] == wh[r]; r++);
        F[++tot] = r - l + 1;
        S[tot] = S[tot - 1] + F[tot] * F[tot];
    }

    if(tot == 1) return S[tot];

    LL ans = S[tot];
    for(int i = 1; i <= tot; i++) {
        if(F[i] == 1) {
            if(i == 1) {
                ans = max(ans, (F[i + 1] + 1) * (F[i + 1] + 1) + S[tot] - S[i + 1]);
            } else if(i == tot) {
                ans = max(ans, (F[i - 1] + 1) * (F[i - 1] + 1) + S[i - 2]);
            } else {
                ans = max(ans, (F[i - 1] + F[i + 1] + 1) * (F[i - 1] + F[i + 1] + 1) + S[tot] - S[i + 1] + S[i - 2]);
            }
        } else {
            if(i == 1) {
                ans = max(ans, (F[i] - 1) * (F[i] - 1) + (F[i + 1] + 1) * (F[i + 1] + 1) + S[tot] - S[i + 1]);
            } else if(i == tot) {
                ans = max(ans, (F[i - 1] + 1) * (F[i - 1] + 1) + (F[i] - 1) * (F[i] - 1) + S[i - 2]);
            } else {
                ans = max(ans, (F[i - 1] + 1) * (F[i - 1] + 1) + (F[i] - 1) * (F[i] - 1) + S[tot] - S[i] + S[i - 2]);
                ans = max(ans, (F[i + 1] + 1) * (F[i + 1] + 1) + (F[i] - 1) * (F[i] - 1) + S[tot] - S[i + 1] + S[i - 1]);
            }
        }
    }
    return ans;
}

int main() {
    int T, ansk = 0; //FIN;
    scanf("%d", &T);
    while(T--) {
        scanf("%s", wh + 1);
        printf("Case #%d: %I64d\n", ++ansk, solve());
    }
}
