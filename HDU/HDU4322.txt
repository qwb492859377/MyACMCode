/*
********************************************
*      Author:492859377                    *
*      ProblemID:HDU4322                   *
*      VjudgeProblemID:30574               *
*      SubmitTime:2015/10/14 12:14:04      *
*      SubmitType:G++                      *
*      Memory:1632KB                       *
*      CodeLen:3362B                       *
*      RunTime:46ms                        *
********************************************
*/
#include<map>
#include<set>
#include<cmath>
#include<ctime>
#include<stack>
#include<queue>
#include<cstdio>
#include<cctype>
#include<string>
#include<vector>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<functional>
#define fuck printf("fuck")
#define FIN freopen("input.txt","r",stdin)
#define FOUT freopen("output.txt","w+",stdout)
using namespace std;
typedef long long LL;

const int MX = 1000 + 5;
const int MM = 1000 + 5;
const int INF = 0x3f3f3f3f;

struct Edge {
    int to, next, cap, flow, cost;
    Edge() {}
    Edge(int _to, int _next, int _cap, int _flow, int _cost) {
        to = _to; next = _next; cap = _cap; flow = _flow; cost = _cost;
    }
} E[MM];

int Head[MX], tol;
int pre[MX]; //储存前驱顶点
int dis[MX]; //储存到源点s的距离
bool vis[MX];
int N;//节点总个数，节点编号从0~N-1

void init(int n) {
    tol = 0;
    N = n + 2;
    memset(Head, -1, sizeof(Head));
}
void edge_add(int u, int v, int cap, int cost) {
    E[tol] = Edge(v, Head[u], cap, 0, cost);
    Head[u] = tol++;

    E[tol] = Edge(u, Head[v], 0, 0, -cost);
    Head[v] = tol++;
}
bool spfa(int s, int t) {
    queue<int>q;
    for (int i = 0; i < N; i++) {
        dis[i] = INF;
        vis[i] = false;
        pre[i] = -1;
    }
    dis[s] = 0;
    vis[s] = true;
    q.push(s);
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        vis[u] = false;
        for (int i = Head[u]; i != -1; i = E[i].next) {
            int v = E[i].to;
            if (E[i].cap > E[i].flow && dis[v] > dis[u] + E[i].cost) {
                dis[v] = dis[u] + E[i].cost;
                pre[v] = i;
                if (!vis[v]) {
                    vis[v] = true;
                    q.push(v);
                }
            }
        }
    }
    if (pre[t] == -1) return false;
    else return true;
}

//返回的是最大流， cost存的是最小费用
int minCostMaxflow(int s, int t, int &cost) {
    int flow = 0;
    cost = 0;
    while (spfa(s, t)) {
        int Min = INF;
        for (int i = pre[t]; i != -1; i = pre[E[i ^ 1].to]) {
            if (Min > E[i].cap - E[i].flow)
                Min = E[i].cap - E[i].flow;
        }
        for (int i = pre[t]; i != -1; i = pre[E[i ^ 1].to]) {
            E[i].flow += Min;
            E[i ^ 1].flow -= Min;
            cost += E[i].cost * Min;
        }
        flow += Min;
    }
    return flow;
}

int B[MX];

int main() {
    int T, ansk = 0; //FIN;
    scanf("%d", &T);
    while(T--) {
        int n, m, k;
        scanf("%d%d%d", &n, &m, &k);

        int sum = 0;
        for(int i = 1; i <= m; i++) {
            scanf("%d", &B[i]);
            sum += B[i];
        }

        int s = 0, t = n + m + 1, ok;
        init(t);
        for(int i = 1; i <= n; i++) {
            edge_add(s, i, 1, 0);
        }
        for(int i = 1; i <= m; i++) {
            int a = B[i] / k, b = B[i] % k;
            if(a) edge_add(n + i, t, a, -k);
            if(b > 1) edge_add(n + i, t, 1, -b);

            for(int j = 1; j <= n; j++) {
                scanf("%d", &ok);
                if(ok) edge_add(j, n + i, 1, 0);
            }
        }

        int cost, flow = minCostMaxflow(s, t, cost);
        cost = -cost;

        printf("Case #%d: ", ++ansk);
        if(n - flow + cost >= sum) printf("YES\n");
        else printf("NO\n");
    }
    return 0;
}
