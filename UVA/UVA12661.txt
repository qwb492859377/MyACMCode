/*
********************************************
*      Author:492859377                    *
*      ProblemID:UVA12661                  *
*      VjudgeProblemID:47070               *
*      SubmitTime:2015/8/17 17:26:08       *
*      SubmitType:C++ 4.8.2                *
*      Memory:0KB                          *
*      CodeLen:1923B                       *
*      RunTime:66ms                        *
********************************************
*/
#include<map>
#include<set>
#include<cmath>
#include<stack>
#include<queue>
#include<cstdio>
#include<string>
#include<vector>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<functional>
#define FIN freopen("input.txt","r",stdin)
#define FOUT freopen("output.txt","w+",stdout)

using namespace std;
typedef long long LL;
typedef pair<int, int> PII;
typedef pair<LL, int> PLI;

const int MX = 1e5 + 5;
const int INF = 0x3f3f3f3f;

int Head[MX], Next[MX], rear;

struct Edge {
    int u, v, cost, a, b;
} E[MX];

void edge_init() {
    rear = 0;
    memset(Head, -1, sizeof(Head));
}

void edge_add(int u, int v, int cost, int a, int b) {
    E[rear].u = u;
    E[rear].v = v;
    E[rear].cost = cost;
    E[rear].a = a;
    E[rear].b = b;
    Next[rear] = Head[u];
    Head[u] = rear++;
}

LL d[MX];
void dijistra(int Begin) {
    memset(d, INF, sizeof(d));
    d[Begin] = 0;

    priority_queue<PLI, vector<PLI>, greater<PLI> >work;
    work.push(PLI(0, Begin));

    while(!work.empty()) {
        PLI f = work.top();
        work.pop();

        LL dist = f.first;
        int u = f.second;

        for(int id = Head[u]; ~id; id = Next[id]) {
            int tq = E[id].a + E[id].b, time = dist % tq, add = 0;
            if(time > E[id].a || time + E[id].cost > E[id].a) add = tq - time;

            int cost = E[id].cost + add, v = E[id].v;
            if(dist + cost < d[v]) {
                d[v] = dist + cost;
                work.push(PLI(dist + cost, v));
            }
        }
    }
}

int main() {
    int n, m, s, t, ansk = 0; //FIN;
    while(~scanf("%d%d%d%d", &n, &m, &s, &t)) {
        edge_init();
        for(int i = 1; i <= m; i++) {
            int u, v, a, b, cost;
            scanf("%d%d%d%d%d", &u, &v, &a, &b, &cost);
            if(a >= cost) edge_add(u, v, cost, a, b);
        }
        dijistra(s);

        printf("Case %d: %lld\n", ++ansk, d[t]);
    }
    return 0;
}
