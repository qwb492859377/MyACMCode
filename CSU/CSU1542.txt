/*
********************************************
*      Author:492859377                    *
*      ProblemID:CSU1542                   *
*      VjudgeProblemID:138130              *
*      SubmitTime:2015/11/24 19:17:35      *
*      SubmitType:C++                      *
*      Memory:15764KB                      *
*      CodeLen:2838B                       *
*      RunTime:996ms                       *
********************************************
*/
#include<map>
#include<set>
#include<cmath>
#include<ctime>
#include<stack>
#include<queue>
#include<cstdio>
#include<cctype>
#include<string>
#include<vector>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<functional>
#define fuck(x) cout<<"["<<x<<"]"
#define FIN freopen("input.txt","r",stdin)
#define FOUT freopen("output.txt","w+",stdout)
using namespace std;
typedef long long LL;
typedef pair<int, int>PII;
#define lson l,m,rt<<1
#define rson m+1,r,rt<<1|1
#define root 1,n,1

const int MX = 3e5 + 5;
const int INF = 0x3f3f3f3f;

int MIN[MX << 2], col[MX << 2], A[MX];

void push_up(int rt) {
    MIN[rt] = min(MIN[rt << 1], MIN[rt << 1 | 1]);
}

void push_down(int rt) {
    if(col[rt]) {
        MIN[rt << 1] += col[rt];
        MIN[rt << 1 | 1] += col[rt];
        col[rt << 1] += col[rt];
        col[rt << 1 | 1] += col[rt];
        col[rt] = 0;
    }
}

void build(int l, int r, int rt) {
    MIN[rt] = INF;
    if(l == r) {
        col[rt] = 0;
        MIN[rt] = A[l];
        return;
    }

    int m = (l + r) >> 1;
    build(lson);
    build(rson);
    push_up(rt);
}

void update(int L, int R, int d, int l, int r, int rt) {
    if(L <= l && r <= R) {
        col[rt] += d;
        MIN[rt] += d;
        return;
    }

    int m = (l + r) >> 1;
    push_down(rt);
    if(L <= m) update(L, R, d, lson);
    if(R > m) update(L, R, d, rson);
    push_up(rt);
}

int query(int l, int r, int rt) {
    if(l == r) {
        return l;
    }

    int m = (l + r) >> 1;
    push_down(rt);
    if(MIN[rt << 1 | 1] <= 1) return query(rson);
    else return query(lson);
}

void test(int l, int r, int rt) {
    if(l == r) {
        printf("[%d,%d]", l, MIN[rt]);
        return;
    }
    int m = (l + r) >> 1;
    push_down(rt);
    test(lson);
    test(rson);
}

char S[MX];

int main() {
    int n, Q; //FIN;
    while(~scanf("%d%d", &n, &Q)) {
        scanf("%s", S + 1);

        set<int>Right;
        A[1] = 1;
        for(int i = 2; i <= n; i++) {
            if(S[i] == '(') A[i] = A[i - 1] + 1;
            else {
                A[i] = A[i - 1] - 1;
                Right.insert(i);
            }
        }
        build(root);

        while(Q--) {
            int op, p; scanf("%d", &op);
            if(S[op] == '(') {
                S[op] = ')';
                Right.insert(op);
                update(op, n, -2, root);

                p = *Right.begin();
                Right.erase(p);
                S[p] = '(';
                update(p, n, 2, root);
            } else {
                S[op] = '(';
                Right.erase(op);
                update(op, n, 2, root);

                p = query(root) + 1;
                S[p] = ')';
                Right.insert(p);
                update(p, n, -2, root);
            }
            printf("%d\n", p);
        }

    }
    return 0;
}
