/*
********************************************
*      Author:492859377                    *
*      ProblemID:CSU1352                   *
*      VjudgeProblemID:51721               *
*      SubmitTime:2015/11/21 20:03:43      *
*      SubmitType:C++                      *
*      Memory:3452KB                       *
*      CodeLen:1760B                       *
*      RunTime:364ms                       *
********************************************
*/
#include<map>
#include<set>
#include<cmath>
#include<ctime>
#include<stack>
#include<queue>
#include<cstdio>
#include<cctype>
#include<string>
#include<vector>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<functional>
#define fuck(x) cout<<"["<<x<<"]"
#define FIN freopen("input.txt","r",stdin)
#define FOUT freopen("output.txt","w+",stdout)
#pragma comment(linker, "/STACK:102400000,102400000")
using namespace std;
typedef long long LL;
typedef pair<int, int>PII;

const int MX = 1e5 + 5;

int P[MX], S[MX];
int A[MX], B[MX], rear;

int find(int x) {
    return P[x] == x ? x : (P[x] = find(P[x]));
}

int BS(int x) {
    int l = 1, r = rear, m;
    while(l <= r) {
        m = (l + r) >> 1;
        if(B[m] == x) return m;
        if(B[m] < x) l = m + 1;
        else r = m - 1;
    }
    return -1;
}

int main() {
    int T, n; //FIN;
    scanf("%d", &T);
    while(T--) {
        scanf("%d", &n);
        for(int i = 1; i <= n; i++) {
            P[i] = i; S[i] = 1;

            scanf("%d", &A[i]);
            B[i] = A[i];
        }
        rear = n;
        sort(B + 1, B + 1 + n);

        queue<int>Q;
        for(int i = 1; i <= n; i++) {
            Q.push(BS(A[i]));
        }

        LL ans = 0;
        while(!Q.empty()) {
            int u = Q.front(); Q.pop();
            while(!Q.empty() && S[u] + u == Q.front()) {
                int v = Q.front(); Q.pop();
                S[u] += S[v];
                P[v] = P[u];
            }

            if(Q.empty()) break;

            ans += S[u];
            if(u == 1) Q.push(u);
            else {
                int p2 = find(u - 1);
                S[p2] += S[u];
                P[u] = p2;
            }
        }
        printf("%lld\n", ans);
    }
    return 0;
}
