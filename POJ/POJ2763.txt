/*
********************************************
*      Author:492859377                    *
*      ProblemID:POJ2763                   *
*      VjudgeProblemID:18624               *
*      SubmitTime:2015/12/3 16:06:52       *
*      SubmitType:G++                      *
*      Memory:11052KB                      *
*      CodeLen:3653B                       *
*      RunTime:2204ms                      *
********************************************
*/
#include<map>
#include<set>
#include<cmath>
#include<ctime>
#include<stack>
#include<queue>
#include<cstdio>
#include<cctype>
#include<string>
#include<vector>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<functional>
#define fuck(x) cout<<"["<<x<<"]"
#define FIN freopen("input.txt","r",stdin)
#define FOUT freopen("output.txt","w+",stdout)
using namespace std;
typedef long long LL;
#define lson l,m,rt<<1
#define rson m+1,r,rt<<1|1

const int MX = 1e5 + 5;
const int INF = 0x3f3f3f3f;

struct Edge {
    int u, v, nxt, cost;
} E[MX << 2];
int Head[MX], h_r;
void edge_init() {
    h_r = 0;
    memset(Head, -1, sizeof(Head));
}
void edge_add(int u, int v, int cost) {
    E[h_r].u = u; E[h_r].v = v; E[h_r].cost = cost;
    E[h_r].nxt = Head[u];
    Head[u] = h_r++;
}

int A[MX];
LL SUM[MX << 2];
void push_up(int rt) {
    SUM[rt] = SUM[rt << 1] + SUM[rt << 1 | 1];
}
void build(int l, int r, int rt) {
    if(l == r) {
        SUM[rt] = A[l];
        return;
    }
    int m = (l + r) >> 1;
    build(lson); build(rson);
    push_up(rt);
}
LL query(int L, int R, int l, int r, int rt) {
    if(L <= l && r <= R) {
        return SUM[rt];
    }
    int m = (l + r) >> 1; LL ret = 0;
    if(L <= m) ret += query(L, R, lson);
    if(R > m) ret += query(L, R, rson);
    return ret;
}
void update(int x, int d, int l, int r, int rt) {
    if(l == r) {
        SUM[rt] = d;
        return;
    }
    int m = (l + r) >> 1;
    if(x <= m) update(x, d, lson);
    else update(x, d, rson);
    push_up(rt);
}

int fa[MX], top[MX], siz[MX], son[MX], dep[MX], id[MX], rear;
void DFS1(int u, int f, int d) {
    fa[u] = f; dep[u] = d;
    son[u] = 0; siz[u] = 1;
    for(int i = Head[u]; ~i; i = E[i].nxt) {
        int v = E[i].v;
        if(v == f) continue;
        DFS1(v, u, d + 1);
        siz[u] += siz[v];
        if(siz[son[u]] < siz[v]) {
            son[u] = v;
        }
    }
}
void DFS2(int u, int tp) {
    top[u] = tp;
    id[u] = ++rear;
    if(son[u]) DFS2(son[u], tp);
    for(int i = Head[u]; ~i; i = E[i].nxt) {
        int v = E[i].v;
        if(v == fa[u] || v == son[u]) continue;
        DFS2(v, v);
    }
}

void HLD_presolve() {
    rear = 0;
    DFS1(1, 1, 1);
    DFS2(1, 1);
    for(int i = 0; i < 2 * (rear - 1); i += 2) {
        int u = E[i].u, v = E[i].v;
        if(dep[u] < dep[v]) swap(u, v);
        A[id[u]] = E[i].cost;
    }
    A[1] = 0;
    build(1, rear, 1);
}
void HLD_update(int x, int d) {
    x = (x - 1) * 2;
    int u = E[x].u, v = E[x].v;
    if(dep[u] < dep[v]) swap(u, v);
    update(id[u], d, 1, rear, 1);
}
LL HLD_query(int u, int v) {
    int tp1 = top[u], tp2 = top[v], ans = 0;
    while(tp1 != tp2) {
        if(dep[tp1] < dep[tp2]) {
            swap(u, v);
            swap(tp1, tp2);
        }
        ans += query(id[tp1], id[u], 1, rear, 1);
        u = fa[tp1]; tp1 = top[u];
    }
    if(u == v) return ans;
    if(dep[u] > dep[v]) swap(u, v);
    ans += query(id[son[u]], id[v], 1, rear, 1);
    return ans;
}

int main() {
    int n, q, s; //FIN;
    while(~scanf("%d%d%d", &n, &q, &s)) {
        edge_init();
        for(int i = 1; i <= n - 1; i++) {
            int u, v, cost;
            scanf("%d%d%d", &u, &v, &cost);
            edge_add(u, v, cost);
            edge_add(v, u, cost);
        }
        HLD_presolve();

        int op, a, b;
        while(q--) {
            scanf("%d", &op);
            if(op == 0) {
                scanf("%d", &a);
                printf("%d\n", HLD_query(a, s));
                s = a;
            } else {
                scanf("%d%d", &a, &b);
                HLD_update(a, b);
            }
        }
    }
    return 0;
}
