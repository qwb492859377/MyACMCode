/*
********************************************
*      Author:492859377                    *
*      ProblemID:POJ1062                   *
*      VjudgeProblemID:10777               *
*      SubmitTime:2015/8/5 13:41:33        *
*      SubmitType:G++                      *
*      Memory:876KB                        *
*      CodeLen:2091B                       *
*      RunTime:32ms                        *
********************************************
*/
#include<cstdio>
#include<cmath>
#include<cstring>
#include<queue>
#include<vector>
#include<map>
#include<string>
#include<iostream>
#include<functional>
#include<algorithm>

using namespace std;
typedef long long LL;
typedef pair<int, int> PII;

const int MX = 20000 + 5;
const int INF = 0x3f3f3f3f;

int W, n, m;
int Head[MX], Next[MX], rear;
int A[MX], Rank[MX], d[MX];

struct Edge {
    int u, v, cost;
} E[MX];

struct Node {
    int u, cost;
    int Max, Min;
    bool operator<(const Node &b)const {
        return cost > b.cost;
    }
    Node(int a = 0, int b = 0, int c = 0, int d = 0) {
        u = b; cost = a; Min = c; Max = d;
    }
};

void edge_init() {
    rear = 0;
    memset(Head, -1, sizeof(Head));
}

void edge_add(int u, int v, int cost) {
    E[rear].u = u;
    E[rear].v = v;
    E[rear].cost = cost;
    Next[rear] = Head[u];
    Head[u] = rear++;
}

void dijistra(int Begin) {
    memset(d, INF, sizeof(d));
    d[Begin] = 0;

    priority_queue<Node>work;
    work.push(Node(0, Begin, Rank[Begin], Rank[Begin]));

    while(!work.empty()) {
        Node f = work.top();
        work.pop();

        int dist = f.cost, u = f.u;
        int Max = f.Max, Min = f.Min;

        for(int id = Head[u]; ~id; id = Next[id]) {
            int cost = E[id].cost, v = E[id].v;
            if(dist + cost < d[v] && Max - Rank[v] <= W && Rank[v] - Min <= W) {
                d[v] = dist + cost;
                work.push(Node(dist + cost, v, min(Rank[v], Min), max(Rank[v], Max)));
            }
        }
    }
}

int main() {
    //freopen("input.txt","r",stdin);
    while(~scanf("%d%d", &W, &n)) {
        edge_init();

        for(int i = 1; i <= n; i++) {
            scanf("%d%d%d", &A[i], &Rank[i], &m);
            for(int j = 1; j <= m; j++) {
                int v, cost;
                scanf("%d%d", &v, &cost);
                edge_add(i, v, cost);
            }
        }
        dijistra(1);

        int ans = A[1];
        for(int i = 2; i <= n; i++) {
            ans = min(ans, d[i] + A[i]);
        }
        printf("%d\n", ans);
    }
    return 0;
}
