/*
********************************************
*      Author:492859377                    *
*      ProblemID:CodeForces300C            *
*      VjudgeProblemID:38838               *
*      SubmitTime:2015/8/13 23:00:30       *
*      SubmitType:GNU G++ 4.9.2            *
*      Memory:15668KB                      *
*      CodeLen:1731B                       *
*      RunTime:122ms                       *
********************************************
*/
#include<map>
#include<set>
#include<cmath>
#include<stack>
#include<queue>
#include<cstdio>
#include<string>
#include<vector>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<functional>

using namespace std;
typedef long long LL;
typedef pair<int, int> PII;

const int MX = 1000000 + 5;
const int mod = 1e9 + 7;

LL F[MX], invF[MX];

LL power(LL a, LL b) {
    LL ret = 1;
    while(b) {
        if(b & 1) ret = (ret * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return ret;
}

void init() {//这个是用来初始化的，记得
    F[0] = 1;
    for(int i = 1; i < MX; i++) {
        F[i] = (F[i - 1] * i) % mod;
    }
    invF[MX - 1] = power(F[MX - 1], mod - 2);
    for(int i = MX - 2; i >= 0; i--) {
        invF[i] = invF[i + 1] * (i + 1) % mod;
    }
}

LL C(int n, int m) {
    if(n < 0 || m < 0 || m > n) return 0;
    if(m == 0 || m == n)    return 1;
    return F[n] * invF[n - m] % mod * invF[m] % mod;
}

LL A(int n, int m) {
    if(n < 0 || m < 0 || m > n) return 0;
    return F[n] * invF[n - m] % mod;
}

bool check(int n, int x) {
    while(n) {
        if(n % 10 != x) return false;
        n /= 10;
    }
    return true;
}

int a, b, n;
LL solve(int z) {
    if((z - a * n) % (b - a)) return 0;
    int y = (z - a * n) / (b - a);
    return C(n, y);
}

LL DFS(int x) {
    if(x > 9 * n) return 0;

    LL ans = solve(x);
    ans += DFS(10 * x + a);
    ans += DFS(10 * x + b);
    ans %= mod;
    return ans;
}

int main() {
    //freopen("input.txt", "r", stdin);

    init();
    scanf("%d%d%d", &a, &b, &n);
    if(a == b) {
        if(check(a * n, a)) printf("1\n");
        else printf("0\n");
        return 0;
    }

    printf("%I64d\n", DFS(0));
    return 0;
}
