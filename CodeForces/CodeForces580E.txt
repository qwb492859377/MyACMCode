/*
********************************************
*      Author:492859377                    *
*      ProblemID:CodeForces580E            *
*      VjudgeProblemID:246827              *
*      SubmitTime:2015/10/17 0:21:55       *
*      SubmitType:GNU G++ 4.9.2            *
*      Memory:7936KB                       *
*      CodeLen:3178B                       *
*      RunTime:202ms                       *
********************************************
*/
#include<map>
#include<set>
#include<cmath>
#include<ctime>
#include<stack>
#include<queue>
#include<cstdio>
#include<cctype>
#include<string>
#include<vector>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<functional>
#define fuck printf("fuck")
#define FIN freopen("input.txt","r",stdin)
#define FOUT freopen("output.txt","w+",stdout)
using namespace std;
typedef long long LL;

const int MX = 1e5 + 5;
const LL X = 233333;
const LL mod = 1e9 + 7;
#define lson l,m,rt<<1
#define rson m+1,r,rt<<1|1
#define root 1,n,1

char A[MX];
LL F[MX], Fs[MX];
LL S[MX << 2], col[MX << 2];

void init() {
    F[0] = 1; Fs[0] = 0;
    for(int i = 1; i < MX; i++) {
        F[i] = F[i - 1] * X % mod;
        Fs[i] = (Fs[i - 1] + F[i]) % mod;
    }
}

void push_up(int rt, int len) {
    len = len - (len >> 1);
    S[rt] = (S[rt << 1] + S[rt << 1 | 1] * F[len]) % mod;
}

void push_down(int rt, int len) {
    if(col[rt]) {
        col[rt << 1] = col[rt << 1 | 1] = col[rt];
        S[rt << 1] = Fs[len - (len >> 1)] * col[rt] % mod;
        S[rt << 1 | 1] = Fs[len >> 1] * col[rt] % mod;
        col[rt] = 0;
    }
}

void build(int l, int r, int rt) {
    col[rt] = 0;
    if(l == r) {
        S[rt] = F[1] * A[l] % mod;
        return;
    }

    int m = (l + r) >> 1;
    build(lson);
    build(rson);
    push_up(rt, r - l + 1);
}

void update(int L, int R, int d, int l, int r, int rt) {
    if(L <= l && r <= R) {
        S[rt] = Fs[r - l + 1] * d % mod;
        col[rt] = d;
        return;
    }

    int m = (l + r) >> 1;
    push_down(rt, r - l + 1);
    if(L <= m) update(L, R, d, lson);
    if(R > m) update(L, R, d, rson);
    push_up(rt, r - l + 1);
}

LL query(int L, int R, int l, int r, int rt) {
    if(L <= l && r <= R) {
        return S[rt];
    }

    int m = (l + r) >> 1;
    int len = m - max(l, L) + 1;
    push_down(rt, r - l + 1);

    LL ls = -1, rs = -1;
    if(L <= m) ls = query(L, R, lson);
    if(R > m) rs = query(L, R, rson);

    if(~ls && ~rs) return (ls + rs * F[len]) % mod;
    else if(ls == -1) return rs;
    return ls;
}

bool solve(int n, int l, int r, int d) {
    int len = r - l + 1;
    if(len == d) return true;
    if(len < d) return false;

    LL t1, t2;
    int k = len / d;
    if(k == 1) {
        t1 = query(l, r - d, root);
        t2 = query(l + d, r, root);
        return t1 == t2;
    } else {
        if(len % d) {
            t1 = query(l, l + len % d - 1, root);
            t2 = query(r - len % d + 1, r, root);
            if(t1 != t2) return false;
        }

        t1 = query(l, l + (k - 1) * d - 1, root);
        t2 = query(r - (k - 1) * d + 1, r, root);
        return t1 == t2;
    }
}

int main() {
    init();
    int n, q, qt; //FIN;
    while(~scanf("%d%d%d", &n, &q, &qt)) {
        q += qt;
        scanf("%s", A + 1);
        for(int i = 1; i <= n; i++) {
            A[i] = A[i] - '0' + 1;
        }

        build(root);
        for(int i = 1; i <= q; i++) {
            int op, l, r, d;
            scanf("%d%d%d%d", &op, &l, &r, &d);
            if(op == 1) update(l, r, d + 1, root);
            else printf("%s\n", solve(n, l, r, d) ? "YES" : "NO");
        }
    }
    return 0;
}
